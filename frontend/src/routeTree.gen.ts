/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthLayoutImport } from './routes/_AuthLayout'
import { Route as AppLayoutImport } from './routes/_AppLayout'
import { Route as AppLayoutIndexImport } from './routes/_AppLayout/index'
import { Route as AuthLayoutRegisterImport } from './routes/_AuthLayout/register'
import { Route as AuthLayoutLoginImport } from './routes/_AuthLayout/login'
import { Route as AppLayoutPostImport } from './routes/_AppLayout/post'

// Create/Update Routes

const AuthLayoutRoute = AuthLayoutImport.update({
  id: '/_AuthLayout',
  getParentRoute: () => rootRoute,
} as any)

const AppLayoutRoute = AppLayoutImport.update({
  id: '/_AppLayout',
  getParentRoute: () => rootRoute,
} as any)

const AppLayoutIndexRoute = AppLayoutIndexImport.update({
  path: '/',
  getParentRoute: () => AppLayoutRoute,
} as any)

const AuthLayoutRegisterRoute = AuthLayoutRegisterImport.update({
  path: '/register',
  getParentRoute: () => AuthLayoutRoute,
} as any)

const AuthLayoutLoginRoute = AuthLayoutLoginImport.update({
  path: '/login',
  getParentRoute: () => AuthLayoutRoute,
} as any)

const AppLayoutPostRoute = AppLayoutPostImport.update({
  path: '/post',
  getParentRoute: () => AppLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_AppLayout': {
      id: '/_AppLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppLayoutImport
      parentRoute: typeof rootRoute
    }
    '/_AuthLayout': {
      id: '/_AuthLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthLayoutImport
      parentRoute: typeof rootRoute
    }
    '/_AppLayout/post': {
      id: '/_AppLayout/post'
      path: '/post'
      fullPath: '/post'
      preLoaderRoute: typeof AppLayoutPostImport
      parentRoute: typeof AppLayoutImport
    }
    '/_AuthLayout/login': {
      id: '/_AuthLayout/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLayoutLoginImport
      parentRoute: typeof AuthLayoutImport
    }
    '/_AuthLayout/register': {
      id: '/_AuthLayout/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AuthLayoutRegisterImport
      parentRoute: typeof AuthLayoutImport
    }
    '/_AppLayout/': {
      id: '/_AppLayout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppLayoutIndexImport
      parentRoute: typeof AppLayoutImport
    }
  }
}

// Create and export the route tree

interface AppLayoutRouteChildren {
  AppLayoutPostRoute: typeof AppLayoutPostRoute
  AppLayoutIndexRoute: typeof AppLayoutIndexRoute
}

const AppLayoutRouteChildren: AppLayoutRouteChildren = {
  AppLayoutPostRoute: AppLayoutPostRoute,
  AppLayoutIndexRoute: AppLayoutIndexRoute,
}

const AppLayoutRouteWithChildren = AppLayoutRoute._addFileChildren(
  AppLayoutRouteChildren,
)

interface AuthLayoutRouteChildren {
  AuthLayoutLoginRoute: typeof AuthLayoutLoginRoute
  AuthLayoutRegisterRoute: typeof AuthLayoutRegisterRoute
}

const AuthLayoutRouteChildren: AuthLayoutRouteChildren = {
  AuthLayoutLoginRoute: AuthLayoutLoginRoute,
  AuthLayoutRegisterRoute: AuthLayoutRegisterRoute,
}

const AuthLayoutRouteWithChildren = AuthLayoutRoute._addFileChildren(
  AuthLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof AuthLayoutRouteWithChildren
  '/post': typeof AppLayoutPostRoute
  '/login': typeof AuthLayoutLoginRoute
  '/register': typeof AuthLayoutRegisterRoute
  '/': typeof AppLayoutIndexRoute
}

export interface FileRoutesByTo {
  '': typeof AuthLayoutRouteWithChildren
  '/post': typeof AppLayoutPostRoute
  '/login': typeof AuthLayoutLoginRoute
  '/register': typeof AuthLayoutRegisterRoute
  '/': typeof AppLayoutIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_AppLayout': typeof AppLayoutRouteWithChildren
  '/_AuthLayout': typeof AuthLayoutRouteWithChildren
  '/_AppLayout/post': typeof AppLayoutPostRoute
  '/_AuthLayout/login': typeof AuthLayoutLoginRoute
  '/_AuthLayout/register': typeof AuthLayoutRegisterRoute
  '/_AppLayout/': typeof AppLayoutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/post' | '/login' | '/register' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/post' | '/login' | '/register' | '/'
  id:
    | '__root__'
    | '/_AppLayout'
    | '/_AuthLayout'
    | '/_AppLayout/post'
    | '/_AuthLayout/login'
    | '/_AuthLayout/register'
    | '/_AppLayout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppLayoutRoute: typeof AppLayoutRouteWithChildren
  AuthLayoutRoute: typeof AuthLayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AppLayoutRoute: AppLayoutRouteWithChildren,
  AuthLayoutRoute: AuthLayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_AppLayout",
        "/_AuthLayout"
      ]
    },
    "/_AppLayout": {
      "filePath": "_AppLayout.tsx",
      "children": [
        "/_AppLayout/post",
        "/_AppLayout/"
      ]
    },
    "/_AuthLayout": {
      "filePath": "_AuthLayout.tsx",
      "children": [
        "/_AuthLayout/login",
        "/_AuthLayout/register"
      ]
    },
    "/_AppLayout/post": {
      "filePath": "_AppLayout/post.tsx",
      "parent": "/_AppLayout"
    },
    "/_AuthLayout/login": {
      "filePath": "_AuthLayout/login.tsx",
      "parent": "/_AuthLayout"
    },
    "/_AuthLayout/register": {
      "filePath": "_AuthLayout/register.tsx",
      "parent": "/_AuthLayout"
    },
    "/_AppLayout/": {
      "filePath": "_AppLayout/index.tsx",
      "parent": "/_AppLayout"
    }
  }
}
ROUTE_MANIFEST_END */
